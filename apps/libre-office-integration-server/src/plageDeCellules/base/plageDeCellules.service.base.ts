/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlageDeCellules as PrismaPlageDeCellules,
} from "@prisma/client";

export class PlageDeCellulesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlageDeCellulesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.plageDeCellules.count(args);
  }

  async plageDeCellulesItems(
    args: Prisma.PlageDeCellulesFindManyArgs
  ): Promise<PrismaPlageDeCellules[]> {
    return this.prisma.plageDeCellules.findMany(args);
  }
  async plageDeCellules(
    args: Prisma.PlageDeCellulesFindUniqueArgs
  ): Promise<PrismaPlageDeCellules | null> {
    return this.prisma.plageDeCellules.findUnique(args);
  }
  async createPlageDeCellules(
    args: Prisma.PlageDeCellulesCreateArgs
  ): Promise<PrismaPlageDeCellules> {
    return this.prisma.plageDeCellules.create(args);
  }
  async updatePlageDeCellules(
    args: Prisma.PlageDeCellulesUpdateArgs
  ): Promise<PrismaPlageDeCellules> {
    return this.prisma.plageDeCellules.update(args);
  }
  async deletePlageDeCellules(
    args: Prisma.PlageDeCellulesDeleteArgs
  ): Promise<PrismaPlageDeCellules> {
    return this.prisma.plageDeCellules.delete(args);
  }
}
