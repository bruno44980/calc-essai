/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Diagramme as PrismaDiagramme } from "@prisma/client";

export class DiagrammeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiagrammeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.diagramme.count(args);
  }

  async diagrammes(
    args: Prisma.DiagrammeFindManyArgs
  ): Promise<PrismaDiagramme[]> {
    return this.prisma.diagramme.findMany(args);
  }
  async diagramme(
    args: Prisma.DiagrammeFindUniqueArgs
  ): Promise<PrismaDiagramme | null> {
    return this.prisma.diagramme.findUnique(args);
  }
  async createDiagramme(
    args: Prisma.DiagrammeCreateArgs
  ): Promise<PrismaDiagramme> {
    return this.prisma.diagramme.create(args);
  }
  async updateDiagramme(
    args: Prisma.DiagrammeUpdateArgs
  ): Promise<PrismaDiagramme> {
    return this.prisma.diagramme.update(args);
  }
  async deleteDiagramme(
    args: Prisma.DiagrammeDeleteArgs
  ): Promise<PrismaDiagramme> {
    return this.prisma.diagramme.delete(args);
  }
}
