/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PointOfInterest } from "./PointOfInterest";
import { PointOfInterestCountArgs } from "./PointOfInterestCountArgs";
import { PointOfInterestFindManyArgs } from "./PointOfInterestFindManyArgs";
import { PointOfInterestFindUniqueArgs } from "./PointOfInterestFindUniqueArgs";
import { CreatePointOfInterestArgs } from "./CreatePointOfInterestArgs";
import { UpdatePointOfInterestArgs } from "./UpdatePointOfInterestArgs";
import { DeletePointOfInterestArgs } from "./DeletePointOfInterestArgs";
import { Map } from "../../map/base/Map";
import { PointOfInterestCreateInput } from "./PointOfInterestCreateInput";
import { PointOfInterestService } from "../pointOfInterest.service";
@graphql.Resolver(() => PointOfInterest)
export class PointOfInterestResolverBase {
  constructor(protected readonly service: PointOfInterestService) {}

  async _pointOfInterestsMeta(
    @graphql.Args() args: PointOfInterestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PointOfInterest])
  async pointOfInterests(
    @graphql.Args() args: PointOfInterestFindManyArgs
  ): Promise<PointOfInterest[]> {
    return this.service.pointOfInterests(args);
  }

  @graphql.Query(() => PointOfInterest, { nullable: true })
  async pointOfInterest(
    @graphql.Args() args: PointOfInterestFindUniqueArgs
  ): Promise<PointOfInterest | null> {
    const result = await this.service.pointOfInterest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PointOfInterest)
  async createPointOfInterest(
    @graphql.Args() args: CreatePointOfInterestArgs
  ): Promise<PointOfInterest> {
    return await this.service.createPointOfInterest({
      ...args,
      data: {
        ...args.data,

        map: args.data.map
          ? {
              connect: args.data.map,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PointOfInterest)
  async updatePointOfInterest(
    @graphql.Args() args: UpdatePointOfInterestArgs
  ): Promise<PointOfInterest | null> {
    try {
      return await this.service.updatePointOfInterest({
        ...args,
        data: {
          ...args.data,

          map: args.data.map
            ? {
                connect: args.data.map,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PointOfInterest)
  async deletePointOfInterest(
    @graphql.Args() args: DeletePointOfInterestArgs
  ): Promise<PointOfInterest | null> {
    try {
      return await this.service.deletePointOfInterest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Map, {
    nullable: true,
    name: "map",
  })
  async getMap(@graphql.Parent() parent: PointOfInterest): Promise<Map | null> {
    const result = await this.service.getMap(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PointOfInterest)
  async CreatePointOfInterest(
    @graphql.Args()
    args: PointOfInterestCreateInput
  ): Promise<PointOfInterest> {
    return this.service.CreatePointOfInterest(args);
  }

  @graphql.Query(() => [PointOfInterest])
  async ListPointsOfInterest(
    @graphql.Args()
    args: PointOfInterestFindManyArgs
  ): Promise<PointOfInterest[]> {
    return this.service.ListPointsOfInterest(args);
  }
}
