/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PointOfInterestService } from "../pointOfInterest.service";
import { PointOfInterestCreateInput } from "./PointOfInterestCreateInput";
import { PointOfInterest } from "./PointOfInterest";
import { PointOfInterestFindManyArgs } from "./PointOfInterestFindManyArgs";
import { PointOfInterestWhereUniqueInput } from "./PointOfInterestWhereUniqueInput";
import { PointOfInterestUpdateInput } from "./PointOfInterestUpdateInput";

export class PointOfInterestControllerBase {
  constructor(protected readonly service: PointOfInterestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PointOfInterest })
  async createPointOfInterest(
    @common.Body() data: PointOfInterestCreateInput
  ): Promise<PointOfInterest> {
    return await this.service.createPointOfInterest({
      data: {
        ...data,

        map: data.map
          ? {
              connect: data.map,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        longitude: true,

        map: {
          select: {
            id: true,
          },
        },

        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PointOfInterest] })
  @ApiNestedQuery(PointOfInterestFindManyArgs)
  async pointOfInterests(
    @common.Req() request: Request
  ): Promise<PointOfInterest[]> {
    const args = plainToClass(PointOfInterestFindManyArgs, request.query);
    return this.service.pointOfInterests({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        longitude: true,

        map: {
          select: {
            id: true,
          },
        },

        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PointOfInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pointOfInterest(
    @common.Param() params: PointOfInterestWhereUniqueInput
  ): Promise<PointOfInterest | null> {
    const result = await this.service.pointOfInterest({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        longitude: true,

        map: {
          select: {
            id: true,
          },
        },

        nom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PointOfInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePointOfInterest(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() data: PointOfInterestUpdateInput
  ): Promise<PointOfInterest | null> {
    try {
      return await this.service.updatePointOfInterest({
        where: params,
        data: {
          ...data,

          map: data.map
            ? {
                connect: data.map,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          latitude: true,
          longitude: true,

          map: {
            select: {
              id: true,
            },
          },

          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PointOfInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePointOfInterest(
    @common.Param() params: PointOfInterestWhereUniqueInput
  ): Promise<PointOfInterest | null> {
    try {
      return await this.service.deletePointOfInterest({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          latitude: true,
          longitude: true,

          map: {
            select: {
              id: true,
            },
          },

          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/api/points-of-interest")
  @swagger.ApiOkResponse({
    type: PointOfInterest,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreatePointOfInterest(
    @common.Body()
    body: PointOfInterestCreateInput
  ): Promise<PointOfInterest> {
    return this.service.CreatePointOfInterest(body);
  }

  @common.Get("/api/points-of-interest")
  @swagger.ApiOkResponse({
    type: PointOfInterest,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListPointsOfInterest(
    @common.Body()
    body: PointOfInterestFindManyArgs
  ): Promise<PointOfInterest[]> {
    return this.service.ListPointsOfInterest(body);
  }
}
