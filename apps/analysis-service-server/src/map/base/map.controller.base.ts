/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MapService } from "../map.service";
import { MapCreateInput } from "./MapCreateInput";
import { Map } from "./Map";
import { MapFindManyArgs } from "./MapFindManyArgs";
import { MapWhereUniqueInput } from "./MapWhereUniqueInput";
import { MapUpdateInput } from "./MapUpdateInput";
import { PointOfInterestFindManyArgs } from "../../pointOfInterest/base/PointOfInterestFindManyArgs";
import { PointOfInterest } from "../../pointOfInterest/base/PointOfInterest";
import { PointOfInterestWhereUniqueInput } from "../../pointOfInterest/base/PointOfInterestWhereUniqueInput";
import { RouteFindManyArgs } from "../../route/base/RouteFindManyArgs";
import { Route } from "../../route/base/Route";
import { RouteWhereUniqueInput } from "../../route/base/RouteWhereUniqueInput";

export class MapControllerBase {
  constructor(protected readonly service: MapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Map })
  async createMap(@common.Body() data: MapCreateInput): Promise<Map> {
    return await this.service.createMap({
      data: data,
      select: {
        createdAt: true,
        dateImportation: true,
        description: true,
        fichier: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Map] })
  @ApiNestedQuery(MapFindManyArgs)
  async maps(@common.Req() request: Request): Promise<Map[]> {
    const args = plainToClass(MapFindManyArgs, request.query);
    return this.service.maps({
      ...args,
      select: {
        createdAt: true,
        dateImportation: true,
        description: true,
        fichier: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Map })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async map(@common.Param() params: MapWhereUniqueInput): Promise<Map | null> {
    const result = await this.service.map({
      where: params,
      select: {
        createdAt: true,
        dateImportation: true,
        description: true,
        fichier: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Map })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMap(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() data: MapUpdateInput
  ): Promise<Map | null> {
    try {
      return await this.service.updateMap({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateImportation: true,
          description: true,
          fichier: true,
          id: true,
          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Map })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMap(
    @common.Param() params: MapWhereUniqueInput
  ): Promise<Map | null> {
    try {
      return await this.service.deleteMap({
        where: params,
        select: {
          createdAt: true,
          dateImportation: true,
          description: true,
          fichier: true,
          id: true,
          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pointOfInterests")
  @ApiNestedQuery(PointOfInterestFindManyArgs)
  async findPointOfInterests(
    @common.Req() request: Request,
    @common.Param() params: MapWhereUniqueInput
  ): Promise<PointOfInterest[]> {
    const query = plainToClass(PointOfInterestFindManyArgs, request.query);
    const results = await this.service.findPointOfInterests(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        latitude: true,
        longitude: true,

        map: {
          select: {
            id: true,
          },
        },

        nom: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pointOfInterests")
  async connectPointOfInterests(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() body: PointOfInterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pointOfInterests: {
        connect: body,
      },
    };
    await this.service.updateMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pointOfInterests")
  async updatePointOfInterests(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() body: PointOfInterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pointOfInterests: {
        set: body,
      },
    };
    await this.service.updateMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pointOfInterests")
  async disconnectPointOfInterests(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() body: PointOfInterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pointOfInterests: {
        disconnect: body,
      },
    };
    await this.service.updateMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/routes")
  @ApiNestedQuery(RouteFindManyArgs)
  async findRoutes(
    @common.Req() request: Request,
    @common.Param() params: MapWhereUniqueInput
  ): Promise<Route[]> {
    const query = plainToClass(RouteFindManyArgs, request.query);
    const results = await this.service.findRoutes(params.id, {
      ...query,
      select: {
        createdAt: true,
        distanceTotale: true,
        id: true,

        map: {
          select: {
            id: true,
          },
        },

        mode: true,
        nom: true,
        pointsOrdonnS: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/routes")
  async connectRoutes(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() body: RouteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      routes: {
        connect: body,
      },
    };
    await this.service.updateMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/routes")
  async updateRoutes(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() body: RouteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      routes: {
        set: body,
      },
    };
    await this.service.updateMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/routes")
  async disconnectRoutes(
    @common.Param() params: MapWhereUniqueInput,
    @common.Body() body: RouteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      routes: {
        disconnect: body,
      },
    };
    await this.service.updateMap({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/import")
  @swagger.ApiOkResponse({
    type: Map,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ImportMap(
    @common.Body()
    body: MapCreateInput
  ): Promise<Map> {
    return this.service.ImportMap(body);
  }
}
