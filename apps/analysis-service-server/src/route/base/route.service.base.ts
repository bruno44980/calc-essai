/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Route as PrismaRoute, Map as PrismaMap } from "@prisma/client";
import { RouteCreateInput } from "./RouteCreateInput";
import { Route } from "./Route";
import { RouteFindManyArgs } from "./RouteFindManyArgs";

export class RouteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RouteCountArgs, "select">): Promise<number> {
    return this.prisma.route.count(args);
  }

  async routes(args: Prisma.RouteFindManyArgs): Promise<PrismaRoute[]> {
    return this.prisma.route.findMany(args);
  }
  async route(args: Prisma.RouteFindUniqueArgs): Promise<PrismaRoute | null> {
    return this.prisma.route.findUnique(args);
  }
  async createRoute(args: Prisma.RouteCreateArgs): Promise<PrismaRoute> {
    return this.prisma.route.create(args);
  }
  async updateRoute(args: Prisma.RouteUpdateArgs): Promise<PrismaRoute> {
    return this.prisma.route.update(args);
  }
  async deleteRoute(args: Prisma.RouteDeleteArgs): Promise<PrismaRoute> {
    return this.prisma.route.delete(args);
  }

  async getMap(parentId: string): Promise<PrismaMap | null> {
    return this.prisma.route
      .findUnique({
        where: { id: parentId },
      })
      .map();
  }
  async CreateRoute(args: RouteCreateInput): Promise<Route> {
    throw new Error("Not implemented");
  }
  async ListRoutes(args: RouteFindManyArgs): Promise<Route[]> {
    throw new Error("Not implemented");
  }
}
